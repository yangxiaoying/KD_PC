项目目录说明：
config: 全局变量配置
controller: 控制器和逻辑
data: 静态数据存放
filters: 过滤器，包括请求过滤等
helpers: node后端控制器中需要使用的方法等
node_modules: 依赖
public: 存放静态资源，包括图片、样式和脚本
resource: 静态切图
routes: 项目路由
utility: ejs方法类
views: 视图
app.js 项目配置文件


编码约定：
一、文件、文件夹命名
采用camelCase命名，需突出文件功能，比如controller文件夹下的控制器，应命名为detailController，且命名不宜过长，尽量控制在3个单词以内。

二、图片命名
1、公用图片（包括头尾布局页、通用的组件页等）
通用图片放/images/public文件夹下(大项目可以增加public下的分类)，采用层级区分，如头部导航系列下的icon图标可这样命名：header2-nav1-icon1、2、3、4、5...
每一个层级都加序号（如果一个层级只有一张图片或者只有一个系列可以不加）。
2、页面图片
根据页面相似度或者同系列建文件夹，如搜索结果和高级搜索结果页图片images/searchResult，命名同样采用分层形式：searchResult10-list1-pic1、2、3、4、5...

三、样式命名
1、一般采用与页面相同的名称命名（复杂页面或者系列可以再分）
2、采用组件模式编写样式，分模块，做到可以随处移植
3、功能可变模块，不要将所有样式集中在一个模块上，应添加多个class,防止脚本调用和今后修改
4、每个标签都要用类名，禁止用标签名写样式。优点：在编写组件时，组件样式不会受标签样式影响，方便移植。

四、脚本
1、使用单引号
2、使用严格模式
3、后台、移动端可以多使用es6
4、语句结束必须写分号，便于今后压缩

五、静态页制作
1、固定宽度和高度的模块必须写具体数字，并设置overflow:hidden;
2、单行文字展示不了的需要使用text-overflow
3、循环输出的部分，最外层要有一个标签如div包裹
4、循环输出的部分不同的图标、不同的class都应该按顺序标记，比如icon1、icon2、icon3... style1、style2...

六、注释
1、页面注释
    页面注释应该整个将页面的结构分开，比如头部、主干、尾部、侧边、下拉等等都应一目了然
2、样式注释
   样式注释防止css异常禁用中文，主要用于做模块分隔
3、脚本注释
  a、关键变量需要写明具体作用
  b、方法注释需要写明用途、参数和返回值

七、错误
1、必须有良好的错误处理和提示，方便定位问题

八、SVN
1、添加和删除文件必须及时提交，以免造成丢失错误
